#include <iostream>
#include <vector>
#include <string>
#include <cctype>
using namespace std;

vector<string> tasks;

// Create a new task
void createTask() {
    cin.ignore(); // clear buffer
    string task;
    cout << "Enter task: ";
    getline(cin, task);
    tasks.push_back(task);
    cout << "✅ Task added successfully!\n";
}

// Read (view) all tasks
void readTasks() {
    cout << "\n📋 Task List:\n";
    if (tasks.empty()) {
        cout << "No tasks available.\n";
        return;
    }
    for (int i = 0; i < tasks.size(); i++)
        cout << i + 1 << ". " << tasks[i] << "\n";
}

// Update a task (by index only)
void updateTask() {
    int id;
    cout << "Enter task number to update: ";
    cin >> id;
    if (id >= 1 && id <= tasks.size()) {
        cin.ignore(); // clear buffer
        cout << "Enter new task: ";
        getline(cin, tasks[id - 1]);
        cout << "✅ Task updated!\n";
    } else {
        cout << "⚠️ Invalid ID!\n";
    }
}

// Delete task (by index OR by name)
void deleteTask() {
    cout << "Enter task number or task name to delete: ";
    cin.ignore();
    string input;
    getline(cin, input);

    // Check if input is numeric (delete by index)
    bool isNumber = true;
    for (char c : input) {
        if (!isdigit(c)) { isNumber = false; break; }
    }

    if (isNumber) {
        int id = stoi(input);
        if (id >= 1 && id <= tasks.size()) {
            tasks.erase(tasks.begin() + id - 1);
            cout << "🗑️ Task deleted by index!\n";
        } else {
            cout << "⚠️ Invalid ID!\n";
        }
    } else {
        // Delete by task name
        bool found = false;
        for (int i = 0; i < tasks.size(); i++) {
            if (tasks[i] == input) {
                tasks.erase(tasks.begin() + i);
                cout << "🗑️ Task deleted by name!\n";
                found = true;
                break;
            }
        }
        if (!found) cout << "⚠️ Task not found!\n";
    }
}

int main() {
    int choice;
    while (true) {
        cout << "\n====== Task Manager ======\n";
        cout << "1. Create\n2. Read\n3. Update\n4. Delete\n5. Exit\nChoice: ";
        cin >> choice;
        switch (choice) {
            case 1: createTask(); break;
            case 2: readTasks(); break;
            case 3: updateTask(); break;
            case 4: deleteTask(); break;
            case 5: cout << "Exiting... 👋\n"; return 0;
            default: cout << "⚠️ Invalid choice!\n";
        }
    }
}
